services:
  mongo:
    ports:
      - '27017:27017'
    container_name: mongo
    restart: always
    logging:
      options:
        max-size: 1g
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGO_INITDB_DATABASE: wiktionary
    image: mongo:latest
    networks:
      - backend
    volumes:
      - ./mongo:/data/db
      - type: bind
        source: ./mongo-entrypoint/
        target: /docker-entrypoint-initdb.d/
    healthcheck:
      test: echo 'db.runCommand({find:"wiktionary.user"}).ok' | mongosh --authenticationDatabase admin --host localhost -u admin -p admin admin --quiet | grep -q 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

  monctionary:
    container_name: monctionary
    image: ghcr.io/ogniloud/external-dictionaries/monctionary:latest
    environment:
      SPRING_DATA_MONGODB_HOST: mongo

      SPRING_APPLICATION_DICTIONARIES_0_WIKTIONARY_LANGUAGE: EN
      SPRING_APPLICATION_DICTIONARIES_0_WORDS_LANGUAGE: EN
      SPRING_APPLICATION_DICTIONARIES_0_DICTIONARY: ./mongo-entrypoint/en_to_en.json

#      SPRING_APPLICATION_DICTIONARIES_1_WIKTIONARY_LANGUAGE: EN
#      SPRING_APPLICATION_DICTIONARIES_1_WORDS_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_1_DICTIONARY: ./mongo-entrypoint/ru_to_en.json
#
#      SPRING_APPLICATION_DICTIONARIES_2_WIKTIONARY_LANGUAGE: EN
#      SPRING_APPLICATION_DICTIONARIES_2_WORDS_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_2_DICTIONARY: ./mongo-entrypoint/es_to_en.json
#
#      SPRING_APPLICATION_DICTIONARIES_3_WIKTIONARY_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_3_WORDS_LANGUAGE: EN
#      SPRING_APPLICATION_DICTIONARIES_3_DICTIONARY: ./mongo-entrypoint/en_to_ru.json
#
#      SPRING_APPLICATION_DICTIONARIES_4_WIKTIONARY_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_4_WORDS_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_4_DICTIONARY: ./mongo-entrypoint/ru_to_ru.json
#
#      SPRING_APPLICATION_DICTIONARIES_5_WIKTIONARY_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_5_WORDS_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_5_DICTIONARY: ./mongo-entrypoint/es_to_ru.json
#
#      SPRING_APPLICATION_DICTIONARIES_6_WIKTIONARY_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_6_WORDS_LANGUAGE: EN
#      SPRING_APPLICATION_DICTIONARIES_6_DICTIONARY: ./mongo-entrypoint/en_to_es.json
#
#      SPRING_APPLICATION_DICTIONARIES_7_WIKTIONARY_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_7_WORDS_LANGUAGE: RU
#      SPRING_APPLICATION_DICTIONARIES_7_DICTIONARY: ./mongo-entrypoint/ru_to_es.json
#
#      SPRING_APPLICATION_DICTIONARIES_8_WIKTIONARY_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_8_WORDS_LANGUAGE: ES
#      SPRING_APPLICATION_DICTIONARIES_8_DICTIONARY: ./mongo-entrypoint/es_to_es.json
    networks:
      - backend
    ports:
      - 8083:8080
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./mongo-entrypoint:/mongo-entrypoint

  wordmaster:
    container_name: wordmaster
    image: ghcr.io/ogniloud/external-dictionaries/wordmaster:latest
    environment:
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka1:19092,kafka2:19093
      SPRING_DATA_MONGODB_HOST: mongo
    networks:
      - backend
    ports:
      - 8084:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"
#    depends_on:
#      monctionary:
#        condition: service_completed_successfully

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    volumes:
      - zoo_data:/var/lib/zookeeper/data:rw
      - zoo_log:/var/lib/zookeeper/log:rw
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1
    volumes:
      - broker1:/var/lib/kafka/data:rw
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zoo1
    volumes:
      - broker2:/var/lib/kafka/data:rw
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  mongo: {}
  zoo_data: { }
  zoo_log: { }
  broker1: { }
  broker2: { }

networks:
  backend: {}

